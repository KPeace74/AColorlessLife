<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_living</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_info = instance_nearest(0, 0, obj_room_info)
hsp = 0
vsp = 0
jumpspeed = global.playerJumpSpeed
movespeed = global.playerMoveSpeed
grav = global.gameGravity
dir = "right"
jumps = 2
sprintSpeed = global.playerSprintSpeed
crouchSpeed = global.playerCrouchSpeed
climbSpeed = global.playerClimbSpeed
state = playerStates.STANDING
dirN = 1
hp = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pause || global.stop) {
    exit
}

if (initializationDone) {

//Variable Initiaion
target = obj_solid
key_left = keyboard_check(vk_left)
key_right = keyboard_check(vk_right)
key_jump = keyboard_check_pressed(vk_up)
key_sprint = keyboard_check(vk_shift)
key_climb = keyboard_check(vk_up)
key_climb_check = keyboard_check_pressed(vk_up)
move = -key_left + key_right;
key_crouch = keyboard_check(vk_down)

//Left and Right movement if sprinting/normal
if (state != playerStates.WALLJUMPING &amp;&amp; state != playerStates.CLIMBING) {
    hsp = move * movespeed + (key_sprint * sprintSpeed * move);
}

//What happens when you die
if (hp &lt;= 0) {
    instance_create(x, y, obj_player_dead)
    x = global.checkpoint[0]
    y = global.checkpoint[1]
    hp = 10
}

//Changes movespeed based on if they're crouching
if (state == playerStates.CROUCHING) {
    hsp = move * crouchSpeed
}

//Makes the player fall faster if down is being held
if (key_crouch &amp;&amp; state == playerStates.FALLING) {
    grav = global.gameGravity + 0.8
} else if (!key_crouch) {
    grav = global.gameGravity
}

//If movementDisabled = true then the player can't move
if (false) {
    global.movementDisabled = true
} else if (true) {
    global.movementDisabled = false
}


//Double jumping
if (global.doubleJumpEnabled) {
    if (place_meeting(x, y + 1, obj_solid)) {
        jumps = 2
    }
    if (jumps == 2 &amp;&amp; !place_meeting(x, y + 1, obj_solid)) {
        jumps = 1
    }
    if (jumps == 1 &amp;&amp; keyboard_check_pressed(vk_up) &amp;&amp; !place_meeting(x, y, obj_climbable)) {
        instance_create(x, y + 16, obj_double_jump)
        jumps = 0
        vsp = -jumpspeed
    }
}

//Moving up and down on ladder and moving side to side on ladder
if (state == playerStates.CLIMBING) {
    if (!place_meeting(x, y, obj_climbable)) {
        state = playerStates.STANDING
    }
    if (key_climb) {
        vsp = -climbSpeed //Moving up
    } else if (key_crouch) {
        vsp = climbSpeed //Moving down
    } else {
        vsp = 0
    }
    if (key_sprint) {
        state = playerStates.WALKING
    }
    if (keyboard_check_pressed(vk_left)) {
        if (!instance_position(x - 8, y, obj_climbable)) {
            state = playerStates.WALKING
        } else if (place_meeting(x - 32, y, obj_climbable) &amp;&amp; !place_meeting(x - 32, y, obj_solid)) {
            //hsp -= 3
            state = playerStates.CLIMBING
        }
    } else if (keyboard_check_pressed(vk_right)) {
        if (!instance_position(x + 8, y, obj_climbable)) {
            state = playerStates.WALKING
        } else if (place_meeting(x + 32, y, obj_climbable) &amp;&amp; !place_meeting(x + 32, y, obj_solid)) {
            //hsp += 3 //Moving right on a ladder
            state = playerStates.CLIMBING
        }
    }
    if (state == playerStates.CLIMBING) {
        hsp = move * 3
    }
}

//Gravity pulling the player down
if (state != playerStates.CLIMBING) {
    if (vsp &lt; 10) vsp += grav;
}

//Jumping
if (place_meeting(x, y + 1, obj_solid) &amp;&amp; !global.movementDisabled &amp;&amp; !place_meeting(x, y, obj_climbable)) {
    vsp = key_jump * -jumpspeed
}

//Vertical Collision
if (place_meeting(x, y + vsp, obj_solid)) { 
    while (!place_meeting(x, y + sign(vsp), obj_solid)) { 
        y += sign(vsp);
    }
    vsp = 0;
}

y += vsp //Changing Y based on Vertical Speed

//Horizontal Collision
if (place_meeting(x+hsp, y, obj_solid)) {
    while (!place_meeting(x+sign(hsp), y, obj_solid)) {
        x += sign(hsp);
    }
    hsp = 0;
  
}

if (!global.movementDisabled &amp;&amp; state != playerStates.WALLJUMPING) {
    x += hsp //Changing X based on Horizontal Speed
}

//Setting players direction
if (key_right &amp;&amp; state != playerStates.WALLJUMPING) {
    dir = "right"
    dirN = 1
} else if (key_left &amp;&amp; state != playerStates.WALLJUMPING) {
    dir = "left"
    dirN = -1
}

//Puts the player on the center of the ladder when they first start climbing it
if (state != playerStates.CLIMBING &amp;&amp; key_climb_check &amp;&amp; state != playerStates.WALLJUMPING &amp;&amp; place_meeting(x, y, obj_climbable)) {
    if (instance_position(x, y, obj_climbable) != noone) {
        x = instance_position(x, y, obj_climbable).x + 16
    } else {
        x = instance_nearest(x, y, obj_climbable).x + 16
    }
}

//Changing player states
if (key_climb &amp;&amp; state != playerStates.WALLJUMPING &amp;&amp; place_meeting(x, y, obj_climbable) || (state == playerStates.CLIMBING &amp;&amp; place_meeting(x, y, obj_climbable))) {
    state = playerStates.CLIMBING
} else if (hsp == 0 &amp;&amp; vsp == 0 &amp;&amp; !key_crouch &amp;&amp; place_meeting(x, y + 1, obj_solid)) {
    if (state != playerStates.CLIMBING &amp;&amp; state != playerStates.CROUCHING || (state == playerStates.CROUCHING &amp;&amp; !place_meeting(x, y - 2, obj_solid))) {
        state = playerStates.STANDING
    }
} else if (hsp != 0 &amp;&amp; vsp == 0 &amp;&amp; !key_sprint &amp;&amp; !key_crouch &amp;&amp; state != playerStates.CLIMBING) {
    if (state != playerStates.CROUCHING || (state == playerStates.CROUCHING &amp;&amp; !place_meeting(x, y - 2, obj_solid))) {
        state = playerStates.WALKING
    }
} else if (hsp != 0 &amp;&amp; vsp == 0 &amp;&amp; key_sprint &amp;&amp; !key_crouch) {
    if (state != playerStates.CROUCHING || (state == playerStates.CROUCHING &amp;&amp; !place_meeting(x, y - 2, obj_solid))) {
        state = playerStates.RUNNING
    }
} else if (vsp != 0 &amp;&amp; !place_meeting(x, y + 1, obj_solid) &amp;&amp; /*!place_meeting(x + 1, y, obj_solid) &amp;&amp; !place_meeting(x - 1, y, obj_solid) &amp;&amp;*/ !(state == playerStates.CLIMBING &amp;&amp; place_meeting(x, y, obj_climbable))) {
    state = playerStates.FALLING
} else if (key_crouch &amp;&amp; state != playerStates.CLIMBING || (state == playerStates.CROUCHING &amp;&amp; place_meeting(x, y - 2, obj_solid))) {
    state = playerStates.CROUCHING
} else if (global.wallJumpEnabled &amp;&amp; !place_meeting(x, y + 1, obj_solid) &amp;&amp; (place_meeting(x + 1, y, obj_solid) || place_meeting(x - 1, y, obj_solid))) {
    state = playerStates.WALLJUMPING
}


//Walljumping
if (global.wallJumpEnabled) {
    if (state == playerStates.WALLJUMPING) {
        if (place_meeting(x + 1, y, obj_solid)) {
            dir = "left"
            dirN = -1
            vsp = 0
            if (key_left) {
                x -= 1
            }
        } else if (place_meeting(x - 1, y, obj_solid)) {
            dir = "right"
            dirN = 1
            vsp = 0
            if (key_right) {
                x += 1
            }
        }
        if (key_jump) {
            if (place_meeting(x - 1, y, obj_solid)) {
                x += 1
                vsp = -7
                hsp = 7
            } else if (place_meeting(x + 1, y, obj_solid)) {
                x -= 1
                vsp = -7
                hsp = -7
            }
        }
    }
}

//Changing player sprites
if (state == playerStates.STANDING) {
    sprite_index = spr_player_standing
    image_xscale = dirN
} else if (state == playerStates.WALKING) {
    sprite_index = spr_player_walking
    image_xscale = dirN
} else if (state == playerStates.RUNNING) {
    sprite_index = spr_player_running
    image_xscale = dirN
} else if (state == playerStates.CROUCHING) {
    sprite_index = spr_player_crouching
    image_xscale = dirN
} else if (state == playerStates.FALLING) {
    if (jumps != 0) {
        sprite_index = spr_player_falling
    } else {
        sprite_index = spr_player_double_jump
    }
    image_xscale = dirN
} else if (state == playerStates.CLIMBING) {
    sprite_index = spr_player_climbing
} else if (state == playerStates.WALLJUMPING) {
    sprite_index = spr_player_walljump
}


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &gt; room_width || x &lt; 0) {
    room_info.sideDeaths += 1
    x = global.checkpoint[0]
    y = global.checkpoint[1]
}
if (y &gt; room_height) {
    room_info.fallingDeaths += 1
    x = global.checkpoint[0]
    y = global.checkpoint[1]
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.pause &amp;&amp; !global.stop) {
x = 864
y = 704
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
